name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "GlChemDraw ${{ github.ref_name }}" \
            --notes "GlChemDraw ${{ github.ref_name }} - Cross-platform Chemistry Structure Drawing & NMR Analysis

          What's New
          - Fixed React Hooks Error: Resolved 'Invalid hook call' errors
          - Fixed Structure Drawing Loading: Implemented dynamic loading
          - Enhanced Error Handling: Added comprehensive error boundaries
          - Cross-platform Support: Windows, Mac, and Linux builds

          Downloads
          - Windows: MSI and NSIS installers
          - Mac: DMG and APP bundles
          - Linux: DEB and AppImage packages

          System Requirements
          - Windows: Windows 10/11 (64-bit)
          - Mac: macOS 10.15+ (64-bit)
          - Linux: Ubuntu 18.04+ or equivalent
          - Memory: 4GB RAM minimum, 8GB recommended
          - Storage: 500MB free space
          - Display: 1280x800 minimum resolution"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@2.7.1

      - name: Verify Environment
        run: |
          Write-Host "Node version: $(node --version)"
          Write-Host "NPM version: $(npm --version)"
          Write-Host "Rust version: $(rustc --version)"
          Write-Host "Cargo version: $(cargo --version)"
          Write-Host "Tauri CLI version: $(tauri --version)"
          Write-Host "GitHub CLI version: $(gh --version)"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri build

      - name: Upload Windows files
        run: |
          # Find the actual files that were built
          $msiFile = Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse -Name "*.msi" | Select-Object -First 1
          $exeFile = Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse -Name "*.exe" | Select-Object -First 1
          
          Write-Host "Found MSI file: $msiFile"
          Write-Host "Found EXE file: $exeFile"
          
          $uploadSuccess = $true
          
          if ($msiFile) {
            $msiPath = "src-tauri/target/release/bundle/$msiFile"
            Write-Host "Uploading MSI from: $msiPath"
            try {
              gh release upload ${{ github.ref_name }} $msiPath
              Write-Host "✅ MSI uploaded successfully: $msiFile"
            } catch {
              Write-Host "❌ MSI upload failed: $_"
              $uploadSuccess = $false
            }
          } else {
            Write-Host "❌ MSI file not found"
            Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse
            $uploadSuccess = $false
          }
          
          if ($exeFile) {
            $exePath = "src-tauri/target/release/bundle/$exeFile"
            Write-Host "Uploading EXE from: $exePath"
            try {
              gh release upload ${{ github.ref_name }} $exePath
              Write-Host "✅ NSIS uploaded successfully: $exeFile"
            } catch {
              Write-Host "❌ NSIS upload failed: $_"
              $uploadSuccess = $false
            }
          } else {
            Write-Host "❌ NSIS file not found"
            Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse
            $uploadSuccess = $false
          }
          
          if (-not $uploadSuccess) {
            Write-Host "❌ Some uploads failed"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@2.7.1

      - name: Verify Environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Tauri CLI version: $(tauri --version)"
          echo "GitHub CLI version: $(gh --version)"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri build

      - name: Upload macOS files
        run: |
          # Find the actual files that were built
          DMG_FILE=$(find src-tauri/target/release/bundle -name "*.dmg" -type f | head -1)
          APP_DIR=$(find src-tauri/target/release/bundle -name "*.app" -type d | head -1)
          
          echo "Found DMG file: $DMG_FILE"
          echo "Found APP directory: $APP_DIR"
          
          UPLOAD_SUCCESS=true
          
          if [ -n "$DMG_FILE" ] && [ -f "$DMG_FILE" ]; then
            echo "Uploading DMG from: $DMG_FILE"
            if gh release upload ${{ github.ref_name }} "$DMG_FILE"; then
              echo "✅ DMG uploaded successfully"
            else
              echo "❌ DMG upload failed"
              UPLOAD_SUCCESS=false
            fi
          else
            echo "❌ DMG file not found"
            find src-tauri/target/release/bundle -name "*.dmg" -type f
            UPLOAD_SUCCESS=false
          fi
          
          if [ -n "$APP_DIR" ] && [ -d "$APP_DIR" ]; then
            echo "Uploading APP from: $APP_DIR"
            if gh release upload ${{ github.ref_name }} "$APP_DIR"; then
              echo "✅ APP uploaded successfully"
            else
              echo "❌ APP upload failed"
              UPLOAD_SUCCESS=false
            fi
          else
            echo "❌ APP directory not found"
            find src-tauri/target/release/bundle -name "*.app" -type d
            UPLOAD_SUCCESS=false
          fi
          
          if [ "$UPLOAD_SUCCESS" = false ]; then
            echo "❌ Some uploads failed"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@2.7.1

      - name: Verify Environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Tauri CLI version: $(tauri --version)"
          echo "GitHub CLI version: $(gh --version)"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri build

      - name: Upload Linux files
        run: |
          # Find the actual files that were built
          DEB_FILE=$(find src-tauri/target/release/bundle -name "*.deb" -type f | head -1)
          APPIMAGE_FILE=$(find src-tauri/target/release/bundle -name "*.AppImage" -type f | head -1)
          
          echo "Found DEB file: $DEB_FILE"
          echo "Found AppImage file: $APPIMAGE_FILE"
          
          UPLOAD_SUCCESS=true
          
          if [ -n "$DEB_FILE" ] && [ -f "$DEB_FILE" ]; then
            echo "Uploading DEB from: $DEB_FILE"
            if gh release upload ${{ github.ref_name }} "$DEB_FILE"; then
              echo "✅ DEB uploaded successfully"
            else
              echo "❌ DEB upload failed"
              UPLOAD_SUCCESS=false
            fi
          else
            echo "❌ DEB file not found"
            find src-tauri/target/release/bundle -name "*.deb" -type f
            UPLOAD_SUCCESS=false
          fi
          
          if [ -n "$APPIMAGE_FILE" ] && [ -f "$APPIMAGE_FILE" ]; then
            echo "Uploading AppImage from: $APPIMAGE_FILE"
            if gh release upload ${{ github.ref_name }} "$APPIMAGE_FILE"; then
              echo "✅ AppImage uploaded successfully"
            else
              echo "❌ AppImage upload failed"
              UPLOAD_SUCCESS=false
            fi
          else
            echo "❌ AppImage file not found"
            find src-tauri/target/release/bundle -name "*.AppImage" -type f
            UPLOAD_SUCCESS=false
          fi
          
          if [ "$UPLOAD_SUCCESS" = false ]; then
            echo "❌ Some uploads failed"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}